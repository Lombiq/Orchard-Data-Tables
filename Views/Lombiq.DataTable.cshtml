@using OrchardCore.ResourceManagement

@inject IResourceManager ResourceManager

@{
    var viewModel = Model.ViewModel as DataTableDefinitionViewModel;

    var pageSize = viewModel?.PageSize ?? Site.PageSize;
    var skip = viewModel?.Skip ?? 0;

    var queryId = viewModel?.QueryId ?? "";
    var columnsDefinition = viewModel?.ColumnsDefinition;
    var columns = columnsDefinition?.Columns.ToList() ?? new List<DataTableColumnDefinition>();
    var childRowsEnabled = viewModel?.ChildRowsEnabled ?? false;
    var progressiveLoadingEnabled = viewModel?.ProgressiveLoadingEnabled ?? false;
    var queryStringParametersLocalStorageKey = viewModel?.QueryStringParametersLocalStorageKey ?? "";
    var dataProvider = viewModel?.DataProvider ?? "";
    var dataTableId = string.IsNullOrEmpty(viewModel?.DataTableId) ? ElementNames.DataTableElementName : viewModel.DataTableId;
    var dataTableCssClasses = string.IsNullOrEmpty(viewModel?.DataTableCssClasses) ? ElementNames.DataTableWrapperDefaultElementName : viewModel.DataTableCssClasses;

    var defaultSortingColumnIndex = Math.Max(
        0, Math.Max(columns.FindIndex(column => column.Orderable), columns.FindIndex(column => column.Name == columnsDefinition?.DefaultSortingColumnName)));

    var defaultSortingDirection = columnsDefinition?.DefaultSortingDirection ?? SortingDirection.Ascending;
    var defaultSortingDirectionValue = defaultSortingDirection == SortingDirection.Ascending ? "asc" : "desc";

    var rowApiUrl = Url.Action(nameof(DataTablesRowController.Get), typeof(DataTablesRowController).ControllerName(), new { Area = FeatureIds.Lombiq_DataTables });
    var childRowApiUrl = Url.Action(nameof(DataTablesChildRowController.Get), typeof(DataTablesChildRowController).ControllerName(), new { Area = FeatureIds.Lombiq_DataTables });

    const string loadingIndicatorElementName = ElementNames.DataTableElementName + "__loadingIndicator";
    const string rowElementWithChildRowVisibleModifier = ElementNames.DataTableRowElementName + "_childRowVisible";
    const string childRowElementName = ElementNames.DataTableElementName + "__childRow";
    const string toggleChildRowButtonElementName = ElementNames.DataTableElementName + "__toggleChildRowButton";
    const string templatesElementName = ElementNames.DataTableElementName + "__templates";

    const string templatePlaceholder = "{{data}}";

    ResourceManager.RegisterResource("script", ResourceNames.Lombiq_DataTables).AtHead();
    ResourceManager.RegisterResource("stylesheet", ResourceNames.JQuery_DataTables_Extensions_Responsive).AtHead();
}

@await DisplayAsync(await New.Lombiq_DataTable_Resources())

<div class="@dataTableCssClasses">
    @await DisplayAsync(await New.Lombiq_DataTable_Table(
        DataTableId: dataTableId,
        Columns: columns,
        ChildRowsEnabled: childRowsEnabled))
    <div class="@templatesElementName" hidden>
        <div data-id="actions" class="btn-group">
            <button type="button" class="btn btn-secondary btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                @T["Actions"]
            </button>

            @{
                var values = new
               {
                   area = "OrchardCore.Contents",
                   contentItemId = templatePlaceholder,
                   returnUrl = FullRequestPath,
               };
            }
            <div class="dropdown-menu dropdown-menu-right">
                <a class="dropdown-item btn-sm" href="@Url.Action("Edit", "Admin", values)">@T["Edit"]</a>
                <a class="dropdown-item btn-sm" href="@Url.Action("Display", "Item", values)">@T["View"]</a>
                <a class="dropdown-item btn-sm" href="@Url.Action("Remove", "Admin", values)" itemprop="RemoveUrl UnsafeUrl" data-title="@T["Delete"]" data-message="@T["Are you sure you want to delete this content item?"]">@T["Delete"]</a>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    ; (function ($) {
        $(function () {
            var templates = {};
            $(".@templatesElementName > div[data-id]").each(function(index, element) {
                templates[element.getAttribute('data-id')] = element.innerHTML.replace(/%7B%7Bdata%7D%7D/g, '@templatePlaceholder');
                element.parentElement.removeChild(element);
            });

            $("#@dataTableId").lombiq_DataTables({
                rowClassName: "@ElementNames.DataTableRowElementName",
                @if (!string.IsNullOrWhiteSpace(queryId))
                {
                    <text>
                        queryId: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(queryId)),
                    </text>
                }
                dataProvider: "@dataProvider",
                rowsApiUrl: "@rowApiUrl",
                dataTablesOptions: {
                    @if (pageSize > 0)
                    {
                        <text>
                            pageLength: @pageSize,
                        </text>
                    }
                    language: {
                        processing: "<div class=\"@loadingIndicatorElementName\">@T["Loading..."]</div>"
                    },
                    order: [["@defaultSortingColumnIndex", "@defaultSortingDirectionValue"]],
                    templates: templates
                },
                serverSidePagingEnabled: @(progressiveLoadingEnabled ? "false" : "true"),
                queryStringParametersLocalStorageKey: "@queryStringParametersLocalStorageKey",
                progressiveLoadingOptions: {
                    progressiveLoadingEnabled: @(progressiveLoadingEnabled ? "true" : "false"),
                    @if (progressiveLoadingEnabled)
                    {
                        <text>
                            skip: @skip,
                            batchSize: @pageSize
                        </text>
                    }
                },
                childRowOptions: {
                    childRowsEnabled: @(childRowsEnabled ? "true" : "false"),
                    @if (childRowsEnabled)
                    {
                        <text>
                            asyncLoading: true,
                            apiUrl: "@childRowApiUrl",
                            childRowClassName: "@childRowElementName",
                            toggleChildRowButtonClassName: "@toggleChildRowButtonElementName",
                            childRowVisibleClassName: "@rowElementWithChildRowVisibleModifier",
                        </text>
                    }
                }
            });
        });
    })(jQuery);
</script>

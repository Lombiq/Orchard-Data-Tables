@using Lombiq.DataTables.Constants
@using Lombiq.DataTables.Controllers.Api
@using Lombiq.DataTables.Models
@using Lombiq.DataTables.ViewModels
@using OrchardCore.Mvc.Core.Utilities

@{
    var projectionPart = Model.ContentPart as ProjectionPart;
    var viewModel = Model.ViewModel as DataTableDefinitionViewModel;

    var pageSize = viewModel?.PageSize ?? projectionPart?.Record.Items ?? Site.PageSize;
    var skip = viewModel?.Skip ?? projectionPart?.Record.Skip ?? 0;

    var queryId = viewModel?.QueryId ?? 0;
    var columnsDefinition = viewModel?.ColumnsDefinition;
    var columns = columnsDefinition?.Columns.ToList() ?? new List<DataTableColumnDefinition>();
    var childRowsEnabled = viewModel?.ChildRowsEnabled ?? false;
    var progressiveLoadingEnabled = viewModel?.ProgressiveLoadingEnabled ?? false;
    var queryStringParametersLocalStorageKey = viewModel?.QueryStringParametersLocalStorageKey ?? "";
    var dataProvider = viewModel?.DataProvider ?? "";
    var dataTableId = string.IsNullOrEmpty(viewModel?.DataTableId) ? ElementNames.DataTableElementName : viewModel.DataTableId;
    var dataTableCssClasses = string.IsNullOrEmpty(viewModel?.DataTableCssClasses) ? ElementNames.DataTableWrapperDefaultElementName : viewModel.DataTableCssClasses;

    var defaultSortingColumnIndex = Math.Max(
        0, Math.Max(columns.FindIndex(column => column.Orderable), columns.FindIndex(column => column.Name == columnsDefinition?.DefaultSortingColumnName)));

    var defaultSortingDirection = columnsDefinition?.DefaultSortingDirection ?? SortingDirection.Ascending;
    var defaultSortingDirectionValue = defaultSortingDirection == SortingDirection.Ascending ? "asc" : "desc";

    var rowApiUrl = Url.Action(nameof(DataTablesRowController.Get), typeof(DataTablesRowController).ControllerName(), new { Area = ResourceNames.Lombiq_DataTables });
    var childRowApiUrl = Url.Action(nameof(DataTablesChildRowController.Get), typeof(DataTablesChildRowController).ControllerName(), new { Area = ResourceNames.Lombiq_DataTables });

    const string loadingIndicatorElementName = ElementNames.DataTableElementName + "__loadingIndicator";
    const string rowElementWithChildRowVisibleModifier = ElementNames.DataTableRowElementName + "_childRowVisible";
    const string childRowElementName = ElementNames.DataTableElementName + "__childRow";
    const string toggleChildRowButtonElementName = ElementNames.DataTableElementName + "__toggleChildRowButton";
}

<script asp-name="@ResourceNames.Lombiq_DataTables" at="Head"></script>

@New.Lombiq_DataTable_Resources()

<div class="@dataTableCssClasses">
    @New.Lombiq_DataTable_Table(
        DataTableId: dataTableId,
        Columns: columns,
        ChildRowsEnabled: childRowsEnabled)
</div>

<script type="text/javascript">
    ; (function ($) {
        $(function () {
            $("#@dataTableId").lombiq_DataTables({
                rowClassName: "@ElementNames.DataTableRowElementName",
                @if (queryId > 0)
                {
                    <text>
                        queryId: @queryId,
                    </text>
                }
                dataProvider: "@dataProvider",
                rowsApiUrl: "@rowApiUrl",
                dataTablesOptions: {
                    @if (pageSize > 0)
                    {
                        <text>
                            pageLength: @pageSize,
                        </text>
                    }
                    language: {
                        processing: "<div class=\"@loadingIndicatorElementName\">@T["Loading..."]</div>"
                    },
                    order: [["@defaultSortingColumnIndex", "@defaultSortingDirectionValue"]]
                },
                serverSidePagingEnabled: @(progressiveLoadingEnabled ? "false" : "true"),
                queryStringParametersLocalStorageKey: "@queryStringParametersLocalStorageKey",
                progressiveLoadingOptions: {
                    progressiveLoadingEnabled: @(progressiveLoadingEnabled ? "true" : "false"),
                    @if (progressiveLoadingEnabled)
                    {
                        <text>
                            skip: @skip,
                            batchSize: @pageSize
                        </text>
                    }
                },
                childRowOptions: {
                    childRowsEnabled: @(childRowsEnabled ? "true" : "false"),
                    @if (childRowsEnabled)
                    {
                        <text>
                            asyncLoading: true,
                            apiUrl: "@childRowApiUrl",
                            childRowClassName: "@childRowElementName",
                            toggleChildRowButtonClassName: "@toggleChildRowButtonElementName",
                            childRowVisibleClassName: "@rowElementWithChildRowVisibleModifier",
                        </text>
                    }
                }
            });
        });
    })(jQuery);
</script>
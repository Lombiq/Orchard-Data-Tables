@using Orchard.Projections.Models
@using Lombiq.DataTables.Constants
@using Lombiq.DataTables.Models

@{
    var projectionPart = Model.ContentPart as ProjectionPart;

    var pageSize = (int?)Model?.PageSize ?? projectionPart?.Record.Items ?? WorkContext.CurrentSite.PageSize;
    var skip = (int?)Model?.Skip ?? projectionPart?.Record.Skip ?? 0;

    var queryId = (int)Model.QueryId;
    var columnsDefinition = Model.ColumnsDefinition as DataTableColumnsDefinition;
    var columns = columnsDefinition.Columns;
    var childRowsEnabled = (bool?)Model.ChildRowsEnabled ?? false;
    var progressiveLoadingEnabled = (bool?)Model.ProgressiveLoadingEnabled ?? false;
    var queryStringParametersLocalStorageKey = (string)Model.QueryStringParametersLocalStorageKey ?? "";
    var dataProvider = (string)Model.DataProvider ?? "";
    var dataTableId = string.IsNullOrEmpty(Model.DataTableId) ? ElementNames.DataTableElementName : (string)Model.DataTableId;
    var dataTableCssClasses = string.IsNullOrEmpty(Model.DataTableCssClasses) ? ElementNames.DataTableWrapperDefaultElementName : (string)Model.DataTableCssClasses;

    var firstOrderableColumnIndex = columns.ToList().FindIndex(column => column.Orderable);
    var defaultSortingColumnIndex = (int?)Model?.DefaultSortingColumnIndex;
    defaultSortingColumnIndex = defaultSortingColumnIndex.HasValue && (columns.ElementAtOrDefault(defaultSortingColumnIndex.Value)?.Orderable ?? false) ?
        defaultSortingColumnIndex : firstOrderableColumnIndex;
    var defaultSortingDirection = (SortingDirection?)Model?.DefaultSortingDirection ?? SortingDirection.Ascending;
    var defaultSortingDirectionValue = defaultSortingDirection == SortingDirection.Ascending ? "asc" : "desc";

    var rowApiUrl = Url.HttpRouteUrl("", new { Area = "Lombiq.DataTables", Controller = "DataTablesRow", Action = "Get" });
    var childRowApiUrl = Url.HttpRouteUrl("", new { Area = "Lombiq.DataTables", Controller = "DataTablesChildRow", Action = "Get" });

    const string LoadingIndicatorElementName = ElementNames.DataTableElementName + "__loadingIndicator";
    const string RowElementWithChildRowVisibleModifier = ElementNames.DataTableRowElementName + "_childRowVisible";
    const string ChildRowElementName = ElementNames.DataTableElementName + "__childRow";
    const string ToggleChildRowButtonElementName = ElementNames.DataTableElementName + "__toggleChildRowButton";
}

@Display.Lombiq_DataTable_Resources()

<div class="@dataTableCssClasses">
    @Display.Lombiq_DataTable_Table(
        DataTableId: dataTableId,
        Columns: columns,
        ChildRowsEnabled: childRowsEnabled)
</div>

<script type="text/javascript">
    ; (function ($) {
        $(function () {
            $("#@dataTableId").lombiq_DataTables({
                rowClassName: "@ElementNames.DataTableRowElementName",
                queryId: @queryId,
                dataProvider: "@dataProvider",
                rowsApiUrl: "@rowApiUrl",
                dataTablesOptions: {
                    @if (pageSize > 0)
                    {
                        <text>
                            pageLength: @pageSize,
                        </text>
                    }
                    language: {
                        processing: "<div class=\"@LoadingIndicatorElementName\">@T("Loading...")</div>"
                    },
                    @if (defaultSortingColumnIndex >= 0)
                    {
                        <text>
                            order: [["@defaultSortingColumnIndex", "@defaultSortingDirectionValue"]]
                        </text>
                    }
                },
                serverSidePagingEnabled: @(progressiveLoadingEnabled ? "false" : "true"),
                queryStringParametersLocalStorageKey: "@queryStringParametersLocalStorageKey",
                progressiveLoadingOptions: {
                    progressiveLoadingEnabled: @(progressiveLoadingEnabled ? "true" : "false"),
                    @if (progressiveLoadingEnabled)
                    {
                        <text>
                            skip: @skip,
                            batchSize: @pageSize
                        </text>
                    }
                },
                childRowOptions: {
                    childRowsEnabled: @(childRowsEnabled ? "true" : "false"),
                    @if (childRowsEnabled)
                    {
                        <text>
                            asyncLoading: true,
                            apiUrl: "@childRowApiUrl",
                            childRowClassName: "@ChildRowElementName",
                            toggleChildRowButtonClassName: "@ToggleChildRowButtonElementName",
                            childRowVisibleClassName: "@RowElementWithChildRowVisibleModifier",
                        </text>
                    }
                }
            });
        });
    })(jQuery);
</script>
@using Lombiq.DataTables.Constants
@using Lombiq.DataTables.Models

@{
    // TODO: Use DataTableDataViewModel.

    var columns = Model.Columns as IEnumerable<DataTableColumnDefinition>;
    var childRowsEnabled = (bool?)Model.ChildRowsEnabled ?? false;
    var rows = Model.Rows as IEnumerable<IEnumerable<string>>;
    var dataTableId = Model.DataTableId as string;

    const string HeaderElementName = ElementNames.DataTableElementName + "__header";
    const string HeaderRowElementName = ElementNames.DataTableElementName + "__headerRow";
    const string HeaderCellElementName = ElementNames.DataTableElementName + "__headerCell";
    const string BodyElementName = ElementNames.DataTableElementName + "__body";
    const string CellElementName = ElementNames.DataTableElementName + "__cell";
    const string ToggleChildRowCellElementName = ElementNames.DataTableElementName + "__toggleChildRowCell";
}

@*
    "width=100%" is required to force the DataTables plugin to stretch the table.
    See: https://datatables.net/examples/basic_init/flexible_width.html
*@
<table id="@dataTableId" class="@ElementNames.DataTableElementName row-border stripe" width="100%">
    <thead class="@HeaderElementName">
        <tr class="@HeaderRowElementName">
            @if (childRowsEnabled)
            {
                <th class="@HeaderCellElementName" data-class-name="@ToggleChildRowCellElementName"></th>
            }

            @foreach (var column in columns)
            {
                <th class="@HeaderCellElementName" 
                    data-class-name="@CellElementName"
                    data-orderable="@Json.Encode(column.Orderable)"
                    @if (!string.IsNullOrEmpty(column.Name))
                    {
                        <text>data-name="@column.Name" data-data="@column.Name"</text>
                    }>
                    @column.Text
                </th>
            }
        </tr>
    </thead>
    <tbody class="@BodyElementName">
        @if (rows != null)
        {
            foreach (var row in rows)
            {
                <tr class="@ElementNames.DataTableRowElementName">
                    @foreach (var cell in row)
                    {
                        <td class="@CellElementName">
                            @Html.Raw(cell)
                        </td>
                    }
                </tr>
            }
        }
    </tbody>
</table>
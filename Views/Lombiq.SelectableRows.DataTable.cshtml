@using Orchard.Projections.Models
@using Lombiq.DataTables.Constants
@using Lombiq.DataTables.Models
@using Lombiq.DataTables.ViewModels

@{
    var projectionPart = Model.ContentPart as ProjectionPart;
    var viewModel = Model.ViewModel as DataTableDefinitionViewModel;

    var pageSize = viewModel?.PageSize ?? projectionPart?.Record.Items ?? WorkContext.CurrentSite.PageSize;
    var recordsTotalIds = viewModel?.RecordsTotalIds;

    const string DefaultBlockName = ElementNames.SelectableRowsDatatableBlockName;

    var BlockName = Model.BlockName as string ?? DefaultBlockName;
    var DataTableElementName = BlockName + "__table";
    var DefaultDataTableId = BlockName + "__dataTable";
    const string SelectedContentIdsElementName = ElementNames.SelectableRowsDatatableSelectedContentIdsElementName;
    const string ContentSelectorElementName = DefaultBlockName + "__contentSelector";
    const string LoadingIndicatorElementName = ElementNames.DataTableElementName + "__loadingIndicator";
    const string ContentSelector = "ContentSelector";
    const string DataTableCheckboxBlockName = "dataTableCheckbox";

    var queryId = viewModel?.QueryId ?? 0;
    var columnsDefinition = viewModel?.ColumnsDefinition as DataTableColumnsDefinition;
    var columns = columnsDefinition.GetVisibleColumns();
    var rows = viewModel.Rows;
    var dataProvider = viewModel?.DataProvider ?? "";
    var dataTableId = string.IsNullOrEmpty(viewModel?.DataTableId) ? DefaultDataTableId : viewModel.DataTableId;
    var wrapperClassNames = string.IsNullOrEmpty(viewModel?.DataTableCssClasses) ? DefaultBlockName : viewModel.DataTableCssClasses;

    var rowApiUrl = Url.HttpRouteUrl("", new { Area = "Lombiq.DataTables", Controller = "DataTablesRow", Action = "Get" });

    columns = (new DataTableColumnDefinition[] {
        new DataTableColumnDefinition { Name = "ContentSelector", Orderable = false, Text = T("Select").Text } })
        .Concat(columns);
}

@Display.Lombiq_TargetBlank()
@Display.Lombiq_DataTable_Resources()
@Display.Lombiq_SelectableRows_DataTable_Resources()

<div class="@wrapperClassNames @BlockName js-@BlockName ">
    <input type="hidden" name="@SelectedContentIdsElementName" class="@SelectedContentIdsElementName js-@SelectedContentIdsElementName" value="[]" />

    @Display.Lombiq_DataTable_Table(
        DataTableId: dataTableId,
        Columns: columns,
        Rows: rows)
</div>

<script type="text/javascript">
    ; (function ($) {
        $(function () {
            $("#@dataTableId").lombiq_DataTables({
                queryId: 0,
                dataProvider: "@dataProvider",
                rowsApiUrl: "@rowApiUrl",
                dataTablesOptions: {
                    pageLength: 25,
                    paging: true,
                    language: {
                        processing: "<div class=\"@LoadingIndicatorElementName\">@T("Processing...")</div>"
                    },
                    order: [["@columnsDefinition.GetDefaultSortingColumnIndex()", "@columnsDefinition.GetDefaultSortingDirectionTechnicalValue()"]]
                },
                serverSidePagingEnabled: true,
                
                callbacks: {
                    ajaxDataLoadedCallback: function (response) {
                        $.each(response.data, function (index, value) {
                            value["@ContentSelector"] = createCheckboxElementHtml(value.id);
                        });

                        $(".dataTables_scrollHead [data-name='ContentSelector']").html("<label class=\"@(DataTableCheckboxBlockName)__label\"><input type=\"checkbox\" class=\"checkbox selectAll @(DataTableCheckboxBlockName)__input\"/><span class=\"@(DataTableCheckboxBlockName)__indicator\">Select</span></label>");
                    }
                }
            });

            var $selectedIdsElement = $(".js-@SelectedContentIdsElementName");
            var selectedContentItemIds = [];

            $(".js-@BlockName").on("change", ".js-@ContentSelectorElementName", function (e) {
                var contentItemId = parseInt($(this).closest("tr").attr("data-contentItemId"));

                if (this.checked) {
                    if (selectedContentItemIds.indexOf(contentItemId) === -1) {
                        selectedContentItemIds.push(contentItemId);
                    }
                }
                else {
                    selectedContentItemIds = $.grep(selectedContentItemIds, function (value) {
                        return value != contentItemId;
                    });
                }

                $selectedIdsElement.val(JSON.stringify(selectedContentItemIds));
            });

            $(".js-@BlockName").on("change", ".selectAll", function (e) {
                if (this.checked) {
                    selectedContentItemIds = @Json.Encode(recordsTotalIds);

                    $(".js-@ContentSelectorElementName").each(function () {
                        $(this).prop('checked', true);
                    });

                }
                else {
                    selectedContentItemIds = [];
                    $(".js-@ContentSelectorElementName").each(function () {
                        $(this).prop('checked', false);
                    });
                }

                $selectedIdsElement.val(JSON.stringify(selectedContentItemIds));
            });

            function createCheckboxElementHtml(contentItemId) {
                var checked = selectedContentItemIds.indexOf(contentItemId) > -1;

                return "<label class=\"@(DataTableCheckboxBlockName)__label\"><input type=\"checkbox\" class=\"checkbox @ContentSelectorElementName js-@ContentSelectorElementName @(DataTableCheckboxBlockName)__input\" " + (checked ? "checked" : "") + "/><span class=\"@(DataTableCheckboxBlockName)__indicator\"></span></label>";
            }
        });
    })(jQuery);
</script>
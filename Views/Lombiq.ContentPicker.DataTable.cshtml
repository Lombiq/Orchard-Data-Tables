@using OrchardCore.Mvc.Core.Utilities
@using Lombiq.DataTables.Constants
@using Lombiq.DataTables.Controllers.Api
@using Lombiq.DataTables.Models
@using Lombiq.DataTables.ViewModels
@{
    var viewModel = Model.ViewModel as DataTableDefinitionViewModel;

    var pageSize = viewModel?.PageSize ?? Site.PageSize;
    //var skip = viewModel?.Skip ?? 0;

    const string defaultBlockName = ElementNames.ContentPickerBlockName;
    const string defaultDataTableId = defaultBlockName + "__dataTable";
    const string selectedContentIdsElementName = ElementNames.ContentPickerSelectedContentIdsElementName;
    const string contentSelectorElementName = defaultBlockName + "__contentSelector";
    const string actionsElementName = defaultBlockName + "__actions";
    const string actionElementName = defaultBlockName + "__action";
    const string submitActionElementName = defaultBlockName + "__submitAction";
    const string cancelActionElementName = defaultBlockName + "__cancelAction";
    const string loadingIndicatorElementName = ElementNames.DataTableElementName + "__loadingIndicator";
    const string pickerInputDataName = "ContentPicker";
    const string dataTableCheckboxBlockName = "dataTableCheckbox";

    var query = Context.Request.Query;

    var queryId = viewModel?.QueryId ?? 0;
    var columnsDefinition = viewModel?.ColumnsDefinition;
    var columns = (new[] { new DataTableColumnDefinition { Name = pickerInputDataName, Orderable = false, Text = T["Select"].Value } })
        .Concat(columnsDefinition?.Columns ?? Array.Empty<DataTableColumnDefinition>());
    var dataProvider = viewModel?.DataProvider ?? "";
    var dataTableId = string.IsNullOrEmpty(viewModel?.DataTableId) ? defaultDataTableId : viewModel.DataTableId;
    var wrapperClassNames = string.IsNullOrEmpty(viewModel?.DataTableCssClasses) ? defaultBlockName : viewModel.DataTableCssClasses;
    var hideActions = Model.HideActions != null ? (bool)Model.HideActions : query["HideActions"].FirstOrDefault() != null;
    var singleChoice = Model.SingleChoice != null ? (bool)Model.HideActions : query["SingleChoice"].FirstOrDefault() != null;

    var rowApiUrl = Url.Action(
        nameof(DataTablesRowController.Get),
        typeof(DataTablesRowController).ControllerName(),
        new { Area = ResourceNames.Lombiq_DataTables });
}

@New.Lombiq_TargetBlank()
@New.Lombiq_DataTable_Resources()
@New.Lombiq_ContentPicker_DataTable_Resources()

<div class="@wrapperClassNames @defaultBlockName js-@defaultBlockName">
    <input type="hidden" name="@selectedContentIdsElementName" class="@selectedContentIdsElementName js-@selectedContentIdsElementName" value="[]" />

    @New.Lombiq_DataTable_Table(
        DataTableId: dataTableId,
        Columns: columns)

    @if (!hideActions)
    {
        <div class="@actionsElementName">
            <div class="@actionElementName @cancelActionElementName js-@cancelActionElementName">@T["Cancel"]</div>
            <div class="@actionElementName @submitActionElementName js-@submitActionElementName">@T["Finish"]</div>
        </div>
    }
</div>

<script type="text/javascript">
    ; (function ($) {
        $(function () {
            var hasParent = parent != null;
            var contentPicker = { selectedContentItemIds: [] };
            if (hasParent) {
                if (!parent.contentPicker) {
                    parent.contentPicker = contentPicker;
                }
            }
            else {
                if (!contentPicker) {
                    window.contentPicker = contentPicker;
                }
            }

            contentPicker = hasParent ? parent.contentPicker : window.contentPicker;
            contentPicker.finish = false;

            var $selectedIdsElement = $(".js-@selectedContentIdsElementName");

            $(".js-@defaultBlockName").on("change", ".js-@contentSelectorElementName", function () {
                var contentItemId = parseInt($(this).closest(".@ElementNames.DataTableRowElementName").attr("data-contentItemId"));

                @if (singleChoice)
                {
                    <text>
                        $(".js-@defaultBlockName .js-@contentSelectorElementName").not(this).each(function () {
                            if (this.checked) {
                                var contentItemIdToRemove = parseInt(
                                    $(this).closest(".@ElementNames.DataTableRowElementName").attr("data-contentItemId"));
                                contentPicker.selectedContentItemIds = $.grep(contentPicker.selectedContentItemIds, function (value) {
                                    return value != contentItemIdToRemove;
                                })

                                $(this).prop("checked", false);
                            }
                        });
                    </text>
                }

                if (this.checked) {
                    contentPicker.selectedContentItemIds.push(contentItemId);
                }
                else {
                    contentPicker.selectedContentItemIds = $.grep(contentPicker.selectedContentItemIds, function (value) {
                        return value != contentItemId;
                    });
                }

                $selectedIdsElement.val(JSON.stringify(contentPicker.selectedContentItemIds));

                $(document).trigger("@ContentPickerJavaScriptEvents.Change");
            });

            @if (!hideActions)
            {
                <text>
                    if (contentPicker.cancelButtonContent) {
                        $(".js-@cancelActionElementName").html(parent.contentPicker.cancelButtonContent);
                    }

                    if (contentPicker.finishButtonContent) {
                        $(".js-@submitActionElementName").html(parent.contentPicker.finishButtonContent);
                    }

                    $(".js-@cancelActionElementName").on("click", function () {
                        if (hasParent) {
                            parent.jQuery.fn.colorbox.close();
                        }
                    });

                    $(".js-@submitActionElementName").on("click", function () {
                        if (hasParent) {
                            contentPicker.finish = true;
                            parent.jQuery.colorbox.close();
                        }
                    });
                </text>
            }

            function createCheckboxElementHtml(contentItemId) {
                var checked = contentPicker.selectedContentItemIds.indexOf(contentItemId) > -1;

                return "<label class=\"@(dataTableCheckboxBlockName)__label\"><input type=\"checkbox\" class=\"checkbox @contentSelectorElementName js-@contentSelectorElementName @(dataTableCheckboxBlockName)__input\" " + (checked ? "checked" : "") + "/><span class=\"@(dataTableCheckboxBlockName)__indicator\"></span></label>";
            }

            $("#@dataTableId").lombiq_DataTables({
                rowClassName: "@ElementNames.DataTableRowElementName",
                queryId: @queryId,
                dataProvider: "@dataProvider",
                rowsApiUrl: "@rowApiUrl",
                dataTablesOptions: {
                    @if (pageSize > 0)
                    {
                        <text>
                            pageLength: @pageSize,
                        </text>
                    }
                    language: {
                        processing: "<div class=\"@loadingIndicatorElementName\">@T["Processing..."]</div>"
                    },
                    order: [[@(columns.Any(column => column.Orderable) ? columns.ToList().FindIndex(column => column.Orderable) : 1), "asc"]]
                },
                serverSidePagingEnabled: true,
                callbacks: {
                    ajaxDataLoadedCallback: function (response) {
                        $.each(response.data, function (index, value) {
                            value["@pickerInputDataName"] = createCheckboxElementHtml(value.id);
                        });
                    }
                }
            });
        });
    })(jQuery);
</script>
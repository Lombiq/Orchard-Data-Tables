@using Orchard.Projections.Models
@using Lombiq.DataTables.Constants
@using Lombiq.DataTables.Models
@using Lombiq.DataTables.ViewModels

@{
    var projectionPart = Model.ContentPart as ProjectionPart;
    var viewModel = Model.ViewModel as DataTableDefinitionViewModel;

    var pageSize = viewModel?.PageSize ?? projectionPart?.Record.Items ?? WorkContext.CurrentSite.PageSize;
    var skip = viewModel?.Skip ?? projectionPart?.Record.Skip ?? 0;

    const string DefaultBlockName = ElementNames.ContentPickerBlockName;
    const string DefaultDataTableId = DefaultBlockName + "__dataTable";
    const string SelectedContentIdsElementName = ElementNames.ContentPickerSelectedContentIdsElementName;
    const string ContentSelectorElementName = DefaultBlockName + "__contentSelector";
    const string ActionsElementName = DefaultBlockName + "__actions";
    const string ActionElementName = DefaultBlockName + "__action";
    const string SubmitActionElementName = DefaultBlockName + "__submitAction";
    const string CancelActionElementName = DefaultBlockName + "__cancelAction";
    const string LoadingIndicatorElementName = ElementNames.DataTableElementName + "__loadingIndicator";
    const string PickerInputDataName = "ContentPicker";
    const string DataTableCheckboxBlockName = "dataTableCheckbox";

    const string hideActionsQueryStringVariableName = "HideActions";
    const string singleChoiceQueryStringVariableName = "SingleChoice";
    const string hidePickerInputQueryStringVariableName = "HidePickerInput";

    var queryId = viewModel?.QueryId ?? 0;
    var columnsDefinition = viewModel?.ColumnsDefinition as DataTableColumnsDefinition;
    var columns = columnsDefinition.GetVisibleColumns();
    var dataProvider = viewModel?.DataProvider ?? "";
    var dataTableId = string.IsNullOrEmpty(viewModel?.DataTableId) ? DefaultDataTableId : viewModel.DataTableId;
    var wrapperClassNames = string.IsNullOrEmpty(viewModel?.DataTableCssClasses) ? DefaultBlockName : viewModel.DataTableCssClasses;
    var hideActions = Model.HideActions != null ? (bool)Model.HideActions : Request.QueryString[hideActionsQueryStringVariableName] != null;
    var singleChoice = Model.SingleChoice != null ? (bool)Model.SingleChoice : Request.QueryString[singleChoiceQueryStringVariableName] != null;
    var hidePickerInput = Model.HidePickerInput != null ? (bool)Model.HidePickerInput : Request.QueryString[hidePickerInputQueryStringVariableName] != null;
    if (!hidePickerInput)
    {
        columns = (new DataTableColumnDefinition[] { new DataTableColumnDefinition { Name = PickerInputDataName, Orderable = false, Text = T("Select").Text } }).Concat(columns);
    }

    var rowApiUrl = Url.HttpRouteUrl("", new { Area = "Lombiq.DataTables", Controller = "DataTablesRow", Action = "Get" });
    var childRowApiUrl = Url.HttpRouteUrl("", new { Area = "Lombiq.DataTables", Controller = "DataTablesChildRow", Action = "Get" });
}

@Display.Lombiq_TargetBlank()
@Display.Lombiq_DataTable_Resources()
@Display.Lombiq_ContentPicker_DataTable_Resources()

<div class="@wrapperClassNames @DefaultBlockName js-@DefaultBlockName">
    <input type="hidden" name="@SelectedContentIdsElementName" class="@SelectedContentIdsElementName js-@SelectedContentIdsElementName" value="[]" />
    @if (hideActions)
    {
        @Html.Hidden(hideActionsQueryStringVariableName)
    }
    @if (singleChoice)
    {
        @Html.Hidden(singleChoiceQueryStringVariableName)
    }
    @if (hidePickerInput)
    {
        @Html.Hidden(hidePickerInputQueryStringVariableName)
    }

    @Display.Lombiq_DataTable_Table(
        DataTableId: dataTableId,
        Columns: columns)

    @if (!hideActions)
    {
        <div class="@ActionsElementName">
            <div class="@ActionElementName @CancelActionElementName js-@CancelActionElementName">@T("Cancel")</div>
            <div class="@ActionElementName @SubmitActionElementName js-@SubmitActionElementName">@T("Finish")</div>
        </div>
    }
</div>

<script type="text/javascript">
    ; (function ($) {
        $(function () {
            var hasParent = parent != null;
            var contentPicker = { selectedContentItemIds: [] };
            if (hasParent) {
                if (!parent.contentPicker) {
                    parent.contentPicker = contentPicker;
                }
            }
            else {
                if (!contentPicker) {
                    window.contentPicker = contentPicker;
                }
            }

            contentPicker = hasParent ? parent.contentPicker : window.contentPicker;
            contentPicker.finish = false;

            var $selectedIdsElement = $(".js-@SelectedContentIdsElementName");

            $(".js-@DefaultBlockName").on("change", ".js-@ContentSelectorElementName", function (e) {
                var contentItemId = parseInt($(this).closest(".@ElementNames.DataTableRowElementName").attr("data-contentItemId"));

                @if (singleChoice)
                {
                    <text>
                        $(".js-@DefaultBlockName .js-@ContentSelectorElementName").not(this).each(function () {
                            if (this.checked) {
                                var contentItemIdToRemove = parseInt(
                                    $(this).closest(".@ElementNames.DataTableRowElementName").attr("data-contentItemId"));
                                contentPicker.selectedContentItemIds = $.grep(contentPicker.selectedContentItemIds, function (value) {
                                    return value != contentItemIdToRemove;
                                })

                                $(this).prop("checked", false);
                            }
                        });
                    </text>
                }

                if (this.checked) {
                    contentPicker.selectedContentItemIds.push(contentItemId);
                }
                else {
                    contentPicker.selectedContentItemIds = $.grep(contentPicker.selectedContentItemIds, function (value) {
                        return value != contentItemId;
                    });
                }

                $selectedIdsElement.val(JSON.stringify(contentPicker.selectedContentItemIds));

                $(document).trigger("@ContentPickerJavaScriptEvents.Change");
            });

            @if (!hideActions)
            {
                <text>
                    if (contentPicker.cancelButtonContent) {
                        $(".js-@CancelActionElementName").html(parent.contentPicker.cancelButtonContent);
                    }

                    if (contentPicker.finishButtonContent) {
                        $(".js-@SubmitActionElementName").html(parent.contentPicker.finishButtonContent);
                    }

                    $(".js-@CancelActionElementName").on("click", function () {
                        if (hasParent) {
                            parent.jQuery.fn.colorbox.close();
                        }
                    });

                    $(".js-@SubmitActionElementName").on("click", function () {
                        if (hasParent) {
                            contentPicker.finish = true;
                            parent.jQuery.colorbox.close();
                        }
                    });
                </text>
            }

            function createCheckboxElementHtml(contentItemId) {
                var checked = contentPicker.selectedContentItemIds.indexOf(contentItemId) > -1;

                return "<label class=\"@(DataTableCheckboxBlockName)__label\"><input type=\"checkbox\" class=\"checkbox @ContentSelectorElementName js-@ContentSelectorElementName @(DataTableCheckboxBlockName)__input\" " + (checked ? "checked" : "") + "/><span class=\"@(DataTableCheckboxBlockName)__indicator\"></span></label>";
            }

            $("#@dataTableId").lombiq_DataTables({
                rowClassName: "@ElementNames.DataTableRowElementName",
                queryId: @queryId,
                dataProvider: "@dataProvider",
                rowsApiUrl: "@rowApiUrl",
                dataTablesOptions: {
                    @if (pageSize > 0)
                    {
                        <text>
                            pageLength: @pageSize,
                        </text>
                    }
                    language: {
                        processing: "<div class=\"@LoadingIndicatorElementName\">@T("Processing...")</div>"
                    },
                    order: [["@columnsDefinition.GetDefaultSortingColumnIndex()", "@columnsDefinition.GetDefaultSortingDirectionTechnicalValue()"]]
                },
                serverSidePagingEnabled: true,
                callbacks: {
                    ajaxDataLoadedCallback: function (response) {
                        $.each(response.data, function (index, value) {
                            value["@PickerInputDataName"] = createCheckboxElementHtml(value.id);
                        });
                    }
                }
            });
        });
    })(jQuery);
</script>
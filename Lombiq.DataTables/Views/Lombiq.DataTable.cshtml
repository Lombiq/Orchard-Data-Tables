@using OrchardCore.ResourceManagement
@using System.Globalization
@using Newtonsoft.Json.Linq
@using Lombiq.DataTables.Services

@inject IEnumerable<IDataTableDataProvider> Providers

@inject IResourceManager ResourceManager

@{
    var viewModel = Model.ViewModel as DataTableDefinitionViewModel;

    var pageSize = viewModel?.PageSize ?? Site.PageSize;
    var skip = viewModel?.Skip ?? 0;

    string queryId = viewModel?.QueryId ?? Model.QueryId?.ToString() ?? "";
    string dataProvider = viewModel?.DataProvider ?? Model.Provider?.ToString() ?? "";
    var columnsDefinition = viewModel?.ColumnsDefinition ?? await Providers
        .Single(provider => provider.GetType().Name == dataProvider)
        .GetColumnsDefinitionAsync(queryId);
    var columns = columnsDefinition?.Columns.ToList() ?? new List<DataTableColumnDefinition>();
    var childRowsEnabled = viewModel?.ChildRowsEnabled ?? false;
    var progressiveLoadingEnabled = viewModel?.ProgressiveLoadingEnabled ?? false;
    var queryStringParametersLocalStorageKey = viewModel?.QueryStringParametersLocalStorageKey ?? "";
    var dataTableId = string.IsNullOrEmpty(viewModel?.DataTableId) ? ElementNames.DataTableElementName : viewModel.DataTableId;
    var dataTableCssClasses = string.IsNullOrEmpty(viewModel?.DataTableCssClasses) ? "" : viewModel.DataTableCssClasses;

    var defaultSortingColumnIndex = Math.Max(
        0, Math.Max(columns.FindIndex(column => column.Orderable), columns.FindIndex(column => column.Name == columnsDefinition?.DefaultSortingColumnName)));

    var defaultSortingDirection = columnsDefinition?.DefaultSortingDirection ?? SortingDirection.Ascending;
    var defaultSortingDirectionValue = defaultSortingDirection == SortingDirection.Ascending ? "asc" : "desc";

    var rowApiUrl = Url.Action(nameof(RowsController.Get), typeof(RowsController).ControllerName(), new { Area = FeatureIds.DataTables });
    var childRowApiUrl = Url.Action(nameof(ChildRowsController.Get), typeof(ChildRowsController).ControllerName(), new { Area = FeatureIds.DataTables });
    var exportApiUrl = Url.Action(nameof(RowsController.Export), typeof(RowsController).ControllerName(), new { Area = FeatureIds.DataTables });

    const string rowElementWithChildRowVisibleModifier = ElementNames.DataTableRowElementName + "_childRowVisible";
    const string childRowElementName = ElementNames.DataTableElementName + "__childRow";
    const string toggleChildRowButtonElementName = ElementNames.DataTableElementName + "__toggleChildRowButton";
    const string templatesElementName = ElementNames.DataTableElementName + "__templates";
    const string errorsElementName = ElementNames.DataTableElementName + "__errors";

    const string templatePlaceholder = "{{data}}";

    ResourceManager.RegisterResource("script", ResourceNames.LombiqDataTables).AtFoot();
    ResourceManager.RegisterResource("script", ResourceNames.DataTables.Bootstrap4Buttons).AtFoot();
    ResourceManager.RegisterResource("stylesheet", ResourceNames.DataTables.Bootstrap4);
    ResourceManager.RegisterResource("stylesheet", ResourceNames.DataTables.Bootstrap4Buttons);

    dynamic additionalOptions = viewModel?.AdditionalDatatableOptions;
    var hasViewAction = (bool)(additionalOptions?.viewAction == true);
}

@await DisplayAsync(await New.Lombiq_DataTable_Resources(ViewModel: viewModel))

<div class="@ElementNames.DataTableWrapperDefaultElementName @dataTableCssClasses">
    @await DisplayAsync(await New.Lombiq_DataTable_Table(
        ViewModel: new DataTableDataViewModel
        {
            DataTableId = dataTableId,
            ColumnsDefinition = columnsDefinition,
            ChildRowsEnabled = childRowsEnabled,
        },
        DataTableId: dataTableId,
        Columns: columns,
        ChildRowsEnabled: childRowsEnabled))
    <div class="@errorsElementName" style="display: none;"></div>
    <div class="@templatesElementName" hidden>
        <div data-id="actions" class="btn-group">
            <button type="button" class="btn btn-secondary btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                @T["Actions"]
            </button>

            @{
                var values = new
                {
                    area = "OrchardCore.Contents",
                    contentItemId = templatePlaceholder,
                    returnUrl = FullRequestPath,
                };
            }
            <div class="dropdown-menu dropdown-menu-right">
                <a class="dropdown-item btn-sm" href="@Url.Action("Edit", "Admin", values)">@T["Edit"]</a>
                @if (hasViewAction)
                {
                    <a class="dropdown-item btn-sm" href="@Url.Action("Display", "Item", values)">@T["View"]</a>
                }
                <a class="dropdown-item btn-sm" href="@Url.Action("Remove", "Admin", values)" itemprop="RemoveUrl UnsafeUrl" data-title="@T["Delete"]" data-message="@T["Are you sure you want to delete this content item?"]">@T["Delete"]</a>
            </div>
        </div>
    </div>
</div>

<script depends-on="@ResourceNames.LombiqDataTables" at="Foot">
    ; (function ($) {
        $(function () {
            var templates = {};
            $(".@templatesElementName > div[data-id]").each(function(index, element) {
                templates[element.getAttribute('data-id')] = element.innerHTML.replace(/%7B%7Bdata%7D%7D/g, '@templatePlaceholder');
                element.parentElement.removeChild(element);
            });

            var dataTablesOptions = $.extend({},
                window.dataTableResources.options,
                {
                    @if (pageSize > 0)
                    {
                        <text>
                            pageLength: @pageSize,
                        </text>
                    }
                    order: [["@defaultSortingColumnIndex", "@defaultSortingDirectionValue"]],
                    templates: templates
                });
            @if (additionalOptions is JObject options)
            {
                <text>
                dataTablesOptions = $.extend({}, dataTablesOptions, @Html.Raw(options.ToString()));
                </text>
            }

            var plugin = $("#@dataTableId").lombiq_DataTables({
                rowClassName: "@ElementNames.DataTableRowElementName",
                @if (!string.IsNullOrWhiteSpace(queryId))
                {
                    <text>
                        queryId: @queryId.JsonHtmlContent(),
                    </text>
                }
                dataProvider: "@dataProvider",
                rowsApiUrl: "@rowApiUrl",
                export: @Json.Serialize(new
                    {
                        textAll = T["Export All"].Value,
                        textVisible = T["Export Visible"].Value,
                        api = exportApiUrl,
                    }),
                texts: @Json.Serialize(new
                    {
                        yes = T["Yes"].Value,
                        no = T["No"].Value,
                    }),
                errorsSelector: ".@errorsElementName",
                dataTablesOptions: dataTablesOptions,
                serverSidePagingEnabled: @(progressiveLoadingEnabled ? "false" : "true"),
                queryStringParametersLocalStorageKey: "@queryStringParametersLocalStorageKey",
                progressiveLoadingOptions: {
                    progressiveLoadingEnabled: @(progressiveLoadingEnabled ? "true" : "false"),
                    @if (progressiveLoadingEnabled)
                    {
                        <text>
                            skip: @skip,
                            batchSize: @pageSize
                        </text>
                    }
                },
                childRowOptions: {
                    childRowsEnabled: @(childRowsEnabled ? "true" : "false"),
                    @if (childRowsEnabled)
                    {
                        <text>
                            asyncLoading: true,
                            apiUrl: "@childRowApiUrl",
                            childRowClassName: "@childRowElementName",
                            toggleChildRowButtonClassName: "@toggleChildRowButtonElementName",
                            childRowVisibleClassName: "@rowElementWithChildRowVisibleModifier",
                        </text>
                    }
                },
                culture: @CultureInfo.CurrentCulture.Name.JsonHtmlContent(),
            });

            window.dataTableResources.created(
                    $("#@dataTableId").parents(".@ElementNames.DataTableWrapperDefaultElementName"),
                    plugin,
                    dataTablesOptions);
        });
    })(jQuery);
</script>
